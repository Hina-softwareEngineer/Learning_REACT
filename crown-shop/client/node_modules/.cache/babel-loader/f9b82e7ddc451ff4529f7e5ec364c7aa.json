{"ast":null,"code":"var _jsxFileName = \"/home/hina/Documents/Python/React_Projects/crown-shop/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport { connect } from 'react-redux';\nimport CollectionPage from '../collection/collection.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport withSpinner from '../../components/with-spinner/with-spinner.compoennt';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selector';\nconst CollectionsOverviewwithSpinner = withSpinner(CollectionsOverview);\nconst CollectionsPagewithSpinner = withSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  //   constructor(){\n  //     super();\n  //   this.state=\n  //   {\n  //     loading:true\n  //   }\n  // }\n  //   unsubscribeFromSnapShot= null;\n  componentDidMount() {\n    /*const collectionRef= firestore.collection('collections');\n     collectionRef.onSnapshot(async snapshot => {\n      const {updateCollections}=this.props;\n      const collectionRef = firestore.collection('collections');\n        this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n      collectionRef.get().then(snapshot => {\n        const collectionMap= convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionMap);\n        this.setState({loading : false});\n      });*/\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props; // const {loading} = this.state;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewwithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 59\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsPagewithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 67\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  //updateCollections : collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/hina/Documents/Python/React_Projects/crown-shop/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionsOverview","connect","CollectionPage","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","withSpinner","createStructuredSelector","selectIsCollectionFetching","CollectionsOverviewwithSpinner","CollectionsPagewithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","path","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAA0D,+BAA1D;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAAQC,wBAAR,QAAwC,UAAxC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAGA,MAAMC,8BAA8B,GAAGH,WAAW,CAACN,mBAAD,CAAlD;AACA,MAAMU,0BAA0B,GAACJ,WAAW,CAACJ,cAAD,CAA5C;;AAGA,MAAMS,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAsC;AAEtC;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEEC,EAAAA,iBAAiB,GAAE;AACjB;;;;;;;;;;AAYE,UAAM;AAAER,MAAAA;AAAF,QAAiC,KAAKS,KAA5C;AACAT,IAAAA,0BAA0B;AAE7B;;AACDU,EAAAA,MAAM,GAAE;AACN,UAAM;AAACC,MAAAA,KAAD;AAASC,MAAAA;AAAT,QAA+B,KAAKH,KAA1C,CADM,CAEN;;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGJ,KAAD,iBAAU,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEG;AAA3C,SAAqEH,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,eAEF,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGJ,KAAD,iBAAU,oBAAC,0BAAD;AAA4B,QAAA,SAAS,EAAEG;AAAvC,SAAiEH,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFE,CADF;AAMD;;AAzCmC;;AA6CtC,MAAMK,kBAAkB,GAAIC,QAAQ,KAAK;AACvC;AACAf,EAAAA,0BAA0B,EAAG,MAAMe,QAAQ,CAAEf,0BAA0B,EAA5B;AAFJ,CAAL,CAApC;;AAKA,MAAMgB,eAAe,GAAGd,wBAAwB,CAAC;AAC/CU,EAAAA,oBAAoB,EAAGT;AADwB,CAAD,CAAhD;AAIA,eAAeP,OAAO,CAAEoB,eAAF,EAAmBF,kBAAnB,CAAP,CAA+CR,QAA/C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component'\nimport {connect} from 'react-redux';\nimport CollectionPage from '../collection/collection.component';\nimport {firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport withSpinner from '../../components/with-spinner/with-spinner.compoennt';\nimport {createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selector';\n\n\nconst CollectionsOverviewwithSpinner = withSpinner(CollectionsOverview);\nconst CollectionsPagewithSpinner=withSpinner(CollectionPage);\n\n\nclass ShopPage extends React.Component{\n\n//   constructor(){\n//     super();\n  \n\n//   this.state=\n//   {\n//     loading:true\n//   }\n// }\n\n//   unsubscribeFromSnapShot= null;\n\n  componentDidMount(){\n    /*const collectionRef= firestore.collection('collections');\n\n    collectionRef.onSnapshot(async snapshot => {\n      const {updateCollections}=this.props;\n      const collectionRef = firestore.collection('collections');\n   \n    this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n      collectionRef.get().then(snapshot => {\n        const collectionMap= convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionMap);\n        this.setState({loading : false});\n      });*/\n      const { fetchCollectionsStartAsync } = this.props;\n      fetchCollectionsStartAsync(); \n\n  } \n  render(){\n    const {match , isCollectionFetching}=this.props;\n    // const {loading} = this.state;\n    \n    return (\n      <div className='shop-page'>\n    <Route exact path={`${match.path}`} render={(props)=> <CollectionsOverviewwithSpinner isLoading={isCollectionFetching} {...props} />} />\n    <Route path={`${match.path}/:collectionId`} render={(props)=> <CollectionsPagewithSpinner isLoading={isCollectionFetching} {...props} /> } />\n  </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps =  dispatch => ({\n  //updateCollections : collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStartAsync : () => dispatch (fetchCollectionsStartAsync())\n})\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching : selectIsCollectionFetching\n})\n\nexport default connect (mapStateToProps, mapDispatchToProps )(ShopPage);"]},"metadata":{},"sourceType":"module"}
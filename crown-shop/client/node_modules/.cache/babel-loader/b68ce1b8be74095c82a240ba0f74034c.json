{"ast":null,"code":"var _jsxFileName = \"/home/hina/Documents/Python/React_Projects/crown-shop/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport FormInput from '../form-input/form-input.components';\nimport './sign-in.styles.scss';\nimport CustomButton from '../custom-buttom/custom-buttom.component';\nimport { auth, SignInWithGoogle } from '../../firebase/firebase.utils';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password); // try{\n    //     await auth.signInWithEmailAndPassword(email,password);\n    //     setCredentials({email:'', password: ''})}\n    // catch(error){\n    //     console.log(error);\n    // }\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"I already have an account!\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    label: \"Email\",\n    handleChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    handleChange: handleChange,\n    label: \"Password\",\n    value: password,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"SIGN IN\"), /*#__PURE__*/React.createElement(CustomButton, {\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"SIGN IN WITH GOOGLE \"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/hina/Documents/Python/React_Projects/crown-shop/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","FormInput","CustomButton","auth","SignInWithGoogle","SignIn","emailSignInStart","googleSignInStart","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch","connect"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAO,uBAAP;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,+BAAvC;;AAGA,MAAMC,MAAM,GAAE,CAAC;AAACC,EAAAA,gBAAD;AAAmBC,EAAAA;AAAnB,CAAD,KAA4C;AAEtD,QAAM,CAACC,eAAD,EAAkBC,cAAlB,IAAoCT,QAAQ,CAAC;AAACU,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAG;AAAvB,GAAD,CAAlD;AAGA,QAAM;AAACD,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkBH,eAAxB;;AACA,QAAMI,YAAY,GAAC,MAAMC,KAAN,IAAc;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AAEAR,IAAAA,gBAAgB,CAACI,KAAD,EAAQC,QAAR,CAAhB,CAH6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMI,YAAY,GAAEF,KAAK,IAAI;AACzB,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBJ,KAAK,CAACK,MAA9B;AAEAT,IAAAA,cAAc,CAAC,EAAE,GAAGD,eAAL;AAAsB,OAACS,IAAD,GAAOD;AAA7B,KAAD,CAAd;AACH,GAJD;;AAOI,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFJ,eAII;AAAM,IAAA,QAAQ,EAAEJ,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AACA,IAAA,IAAI,EAAC,OADL;AAEA,IAAA,KAAK,EAAEF,KAFP;AAGA,IAAA,KAAK,EAAC,OAHN;AAID,IAAA,YAAY,EAAEK,YAJb;AAKA,IAAA,QAAQ,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eASI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,UAAhB;AAA2B,IAAA,IAAI,EAAC,UAAhC;AACD,IAAA,YAAY,EAAEA,YADb;AAED,IAAA,KAAK,EAAC,UAFL;AAGA,IAAA,KAAK,EAAEJ,QAHP;AAGiB,IAAA,QAAQ,MAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAcI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,eAEA,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEJ,iBAAvB;AAA2C,IAAA,cAAc,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFA,CAdJ,CAJJ,CADJ;AA+BP,CAxDD;;AA0DA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,iBAAiB,EAAE,MAAMa,QAAQ,CAACb,iBAAiB,EAAlB,CADG;AAEpCD,EAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,QAAR,KAClBS,QAAQ,CAACd,gBAAgB,CAAC;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAAjB;AAH4B,CAAL,CAAnC;;AAMA,eAAeU,OAAO,CAClB,IADkB,EAElBF,kBAFkB,CAAP,CAGXd,MAHW,CAAf","sourcesContent":["import React, {useState}  from 'react';\nimport FormInput from '../form-input/form-input.components';\nimport './sign-in.styles.scss';\n\nimport CustomButton from '../custom-buttom/custom-buttom.component';\nimport { auth, SignInWithGoogle } from '../../firebase/firebase.utils';\n\n\nconst SignIn= ({emailSignInStart, googleSignInStart }) => {\n\n    const [userCredentials, setCredentials] = useState({email: '', password : ''})\n\n    \n    const {email, password}=userCredentials;\n    const handleSubmit=async event=> {\n        event.preventDefault();\n        \n        emailSignInStart(email, password);\n        // try{\n        //     await auth.signInWithEmailAndPassword(email,password);\n        //     setCredentials({email:'', password: ''})}\n        // catch(error){\n        //     console.log(error);\n        // }\n    }\n\n    const handleChange= event => {\n        const { value, name } = event.target;\n\n        setCredentials({ ...userCredentials, [name]:value });\n    }\n\n   \n        return (\n            <div className='sign-in'>\n                <h2>I already have an account!</h2>\n                <span>Sign in with your email and password</span>\n\n                <form onSubmit={handleSubmit}>\n                    <FormInput name='email' \n                    type='email' \n                    value={email} \n                    label='Email'\n                   handleChange={handleChange}\n                    required />\n         \n\n                    <FormInput name='password' type='password'\n                   handleChange={handleChange}\n                   label='Password'\n                    value={password} required />\n                    \n                    <div className='buttons'>\n                    <CustomButton type='submit'>SIGN IN</CustomButton>\n                    <CustomButton onClick={googleSignInStart } isGoogleSignIn>\n                    \n                    SIGN IN WITH GOOGLE </CustomButton>\n\n                    </div>\n                \n                </form>\n            </div>\n        );\n    \n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) =>\n    dispatch(emailSignInStart({ email, password }))\n})\n\nexport default connect(\n    null,\n    mapDispatchToProps\n  )(SignIn);"]},"metadata":{},"sourceType":"module"}